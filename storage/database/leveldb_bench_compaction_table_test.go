// Copyright 2019 The klaytn Authors
// This file is part of the klaytn library.
//
// The klaytn library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The klaytn library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the klaytn library. If not, see <http://www.gnu.org/licenses/>.

package database

import (
	"strconv"
	"testing"

	"github.com/syndtr/goleveldb/leveldb/opt"
)

type LDBOptions struct {
	Name          string
	ValueLength   int
	NumInsertions int
	NumGets       int
	Opts          *opt.Options
}

const (
	valueLength   = 250              // value size
	numInsertions = 20 * 1000 * 1000 // number of insertions
	numGets       = 100000           // number of get operations
)

// getLDBOptionsForTableSize gets default options except for `CompactionTableSize` which equals to `tableSize` * `unit`.
func getLDBOptionsForTableSize(tableSize, unit int) *opt.Options {
	opts := getKlayLDBOptions()
	opts.CompactionTableSize = tableSize * unit

	return opts
}

// getLDBOptionsForTableSizeWithMultiplier gets default options except for `CompactionTableSize` and `CompactionTableSizeMultiplier`
// for each set to `tableSize` * `unit` and 2 respectively.
func getLDBOptionsForTableSizeWithMultiplier(tableSize, unit int) *opt.Options {
	opts := getLDBOptionsForTableSize(tableSize, unit)
	opts.CompactionTableSizeMultiplier = 2

	return opts
}

// getTestLDBOptions returns `LDBOptions` object with predefined constants with `name` and `options`.
func getTestLDBOptions(name string, options *opt.Options) LDBOptions {
	return LDBOptions{
		name,
		valueLength,
		numInsertions,
		numGets,
		options,
	}
}

// getTestLDBOptionsList returns an array of `LDBOptions` from 64KB to 32MB table size as growing 2 times larger for performing benchmarks.
func getTestLDBOptionsList(getOption func(int, int) *opt.Options) []LDBOptions {
	var options []LDBOptions
	for i := 64; i <= 32*1024; i *= 2 {
		if i < 1024 {
			name := strconv.Itoa(i) + "KB"
			options = append(options, getTestLDBOptions(name, getOption(i, opt.KiB)))
		} else {
			name := strconv.Itoa(i/1024) + "MB"
			options = append(options, getTestLDBOptions(name, getOption(i/1024, opt.MiB)))
		}
	}
	return options
}

// BenchmarkOptionsLDBTableSizeGet inserts the random bytes to the generated database in the different size of compaction tables.
// To run:
// $ go test -bench=BenchmarkOptionsLDBTableSizeGet
func BenchmarkOptionsLDBTableSizeGet(b *testing.B) {
	list := getTestLDBOptionsList(getLDBOptionsForTableSize)
	for _, bm := range list {
		b.Run(bm.Name, func(b *testing.B) {
			benchmarkKlayOptionsGet(b, bm.Opts, bm.ValueLength, bm.NumInsertions, bm.NumGets, randomRead)
		})
	}
}

// BenchmarkOptionsLDBTableSizeMultiplierGet inserts the random bytes to the generated database in the different size of compaction tables
// and the compaction table size multiplier set to 2
// To run:
// $ go test -bench=BenchmarkOptionsLDBTableSizeMultiplierGet
func BenchmarkOptionsLDBTableSizeMultiplierGet(b *testing.B) {
	list := getTestLDBOptionsList(getLDBOptionsForTableSizeWithMultiplier)
	for _, bm := range list {
		b.Run(bm.Name, func(b *testing.B) {
			benchmarkKlayOptionsGet(b, bm.Opts, bm.ValueLength, bm.NumInsertions, bm.NumGets, randomRead)
		})
	}
}

// BenchmarkOptionsLDBTableSizePut do the benchmark test by inserting the randomly generated bytes with the length `valueLength`
// at the 32 bytes key randomly generated.
// To run:
// $ go test -bench=BenchmarkOptionsLDBTableSizePut
func BenchmarkOptionsLDBTableSizePut(b *testing.B) {
	list := getTestLDBOptionsList(getLDBOptionsForTableSize)
	for _, bm := range list {
		b.Run(bm.Name, func(b *testing.B) {
			benchmarkKlayOptionsPut(b, bm.Opts, bm.ValueLength, bm.NumInsertions)
		})
	}
}

// BenchmarkOptionsLDBTableSizeMultiplierPut do the benchmark test by inserting the randomly generated bytes with the length `valueLength`
// at the 32 bytes key randomly generated and the compaction table size multiplier set to 2
// To run:
// $ go test -bench=BenchmarkOptionsLDBTableSizeMultiplierPut
func BenchmarkOptionsLDBTableSizeMultiplierPut(b *testing.B) {
	list := getTestLDBOptionsList(getLDBOptionsForTableSizeWithMultiplier)
	for _, bm := range list {
		b.Run(bm.Name, func(b *testing.B) {
			benchmarkKlayOptionsPut(b, bm.Opts, bm.ValueLength, bm.NumInsertions)
		})
	}
}

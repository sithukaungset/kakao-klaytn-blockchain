#!/usr/bin/env bash

BIN=$(cd "$(dirname $0)"; pwd)
CMD_HOME=$(dirname $BIN)
CONF=$CMD_HOME/conf
STOP_TIMEOUT=10 # seconds to wait for a clean exit

source $CONF/kbnd.conf

pidfile=$CMD_HOME/kbnd.pid
auto_restart_daemon_pidfile=$DATA_DIR/restart_daemon_kbnd.pid

__pid_run() {
    unset pid
    if [ ! -f $pidfile ]; then
        return
    fi
    PID_NUM=$(cat $pidfile)
    if [[ ! -z "$PID_NUM" ]]; then
        export pid=$(ps -p $PID_NUM -o pid=)
    fi
}

__auto_restart_daemon_pid_run() {
    unset auto_restart_daemon_pid
    if [ ! -f $auto_restart_daemon_pidfile ]; then
        return
    fi
    AUTO_RESTART_DAEMON_PID_NUM=$(cat $auto_restart_daemon_pidfile)
    if [[ ! -z "$AUTO_RESTART_DAEMON_PID_NUM" ]]; then
        export auto_restart_daemon_pid=$(ps -p $AUTO_RESTART_DAEMON_PID_NUM -o pid=)
    fi
}

__kill_timeout() {
    local PIDNUM=$1
    kill $PIDNUM
    for i in `seq 0 100 $((1000 * $STOP_TIMEOUT))`; do
        if ! kill -0 $PIDNUM 2> /dev/null; then
            echo "OK"
            return
        fi
        sleep 0.1
    done
    kill -9 $PIDNUM && echo "Killed"
}

#------------------------Related Auto restart daemon functions-----------------------------
__auto_restart_daemon() {
    local backOffTime=$AUTO_RESTART_INTERVAL
    local coeff=2
    while :
    do
        sleep 1
        __pid_run
        if [ -z "$pid" ]; then
            echo "INFO[`date`] node[${PID_NUM}] is down"
            if [ -f $pidfile ]; then
                echo "INFO[`date`] remove redundant pid file"
                rm -f ${pidfile}
            fi
            echo "INFO[`date`] Sleep for backOffTime.... ${backOffTime} seconds."
            sleep $backOffTime
            echo -n "INFO[`date`] "
            start_node
            backOffTime=$(echo $backOffTime $coeff | awk '{printf "%.1f\n",$1*$2}')

            echo "INFO[`date`] backOffTime = ${backOffTime}, Restarted node pid = ${PID_NUM}"
            PID_NUM=$(cat $pidfile)
            echo ""
        fi
    done
}

start_auto_restart_daemon() {
    __auto_restart_daemon_pid_run
    if [ -z $auto_restart_daemon_pid ]; then
        __auto_restart_daemon >> ${LOG_DIR}/restart_daemon.out 2>&1 &
        disown
        AUTO_RESTART_DAEMON_PID_NUM=$!
        AUTO_RESTART_DAEMON_RETVAL=$?

        set +f
        if [ $AUTO_RESTART_DAEMON_RETVAL = 0 ]; then
            echo $AUTO_RESTART_DAEMON_PID_NUM > ${auto_restart_daemon_pidfile}
            echo "Success to start auto restart daemon."
        else
            echo "Fail to start auto restart daemon."
        fi
    fi
}

stop_auto_restart_daemon() {
    __auto_restart_daemon_pid_run
    [ -z "$auto_restart_daemon_pid" ] && echo "auto restart daemon is not running" && return
    echo -n "Shutting down auto restart daemon:  "
    __kill_timeout $(cat ${auto_restart_daemon_pidfile}) && rm -f ${auto_restart_daemon_pidfile}
}

status_auto_restart_daemon() {
    __auto_restart_daemon_pid_run
    if [ -n "$auto_restart_daemon_pid" ]; then
        echo "auto restart daemon is running."
    else
        echo "auto restart daemon is down."
    fi
}

#------------------------Related to Klaytn node functions-----------------------------
start_node() {
    __pid_run
    [ -n "$pid" ] && echo "kbnd already running...[$pid]" && return

    if [ ! -f $KEY_PATH ]; then
        echo
        echo "  [ERROR] : KEY_PATH is not defined in $CONF/kbnd.conf"
        exit 1
    fi

    echo -n "Starting kbnd: "

    if [ ! -d $LOG_DIR ]; then
        mkdir -p $LOG_DIR
    fi

    if [ ! -d $DATA_DIR ]; then
        mkdir -p $DATA_DIR
    fi

    set -f
    OPTIONS="--nodekey ${KEY_PATH}"
    if [[ ! -z $NETWORK_ID ]] && [[ $NETWORK_ID != "" ]]; then
        OPTIONS="$OPTIONS --networkid $NETWORK_ID"
    fi

    if [[ ! -z $METRICS ]] && [[ $METRICS -eq 1 ]]; then
        OPTIONS="$OPTIONS --metrics"
    fi

    if [[ ! -z $PROMETHEUS ]] && [[ $PROMETHEUS -eq 1 ]]; then
        OPTIONS="$OPTIONS --prometheus"
    fi

    if [[ ! -z $AUTHORIZED_NODES ]] && [[ $AUTHORIZED_NODES != "" ]]; then
        OPTIONS="$OPTIONS --authorized-nodes $AUTHORIZED_NODES"
    fi

    if [[ ! -z $ADDITIONAL ]] && [[ $ADDITIONAL != "" ]]; then
        OPTIONS="$OPTIONS $ADDITIONAL"
    fi

    if [ ! -z $DATA_DIR ]; then
        OPTIONS="$OPTIONS --datadir $DATA_DIR"
    fi

    $BIN/kbn ${OPTIONS} >> ${LOG_DIR}/kbnd.out 2>&1 &
    RETVAL=$?
    PIDNUM=$!
    set +f
    if [ $RETVAL = 0 ]; then
        echo $PIDNUM > ${pidfile}
        echo "Success to start node."
    else
        echo "Fail to start node."
    fi
    return $RETVAL
}

stop_node() {
    __pid_run
    [ -z "$pid" ] && echo "kbnd is not running" && return
    echo -n "Shutting down kbnd:  "
    __kill_timeout $(cat ${pidfile}) && rm -f ${pidfile}
}

status_node() {
    __pid_run
    if [ -n "$pid" ]; then
        echo "kbnd is running"
    else
        echo "kbnd is down"
    fi
}

#--------------------- Public functions --------------------------
start() {
    if [ ! -d $LOG_DIR ]; then
        mkdir -p $LOG_DIR
    fi

    if [ ! -z $AUTO_RESTART_NODE ] && [[ $AUTO_RESTART_NODE -eq 1 ]]; then
        start_auto_restart_daemon
    else
        start_node
    fi
}

stop() {
    if [ ! -z $AUTO_RESTART_NODE ] && [[ $AUTO_RESTART_NODE -eq 1 ]]; then
        stop_auto_restart_daemon
    fi
    stop_node
}


status() {
    status_node
    if [ ! -z $AUTO_RESTART_NODE ] && [[ $AUTO_RESTART_NODE -eq 1 ]]; then
        status_auto_restart_daemon
    fi
}

restart() {
    stop
    sleep 3
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        restart
        ;;
    *)
        echo "Usages: kbnd {start|stop|restart|status}"
        exit 1
        ;;
esac
exit 0
